---
title: "Plotting Electric Vehicle Open Data"
subtitle: "with ggplot2 and friends"
date: "2025-06-10"
---

## Goal

Today we're going to:

- Introduce plotting with R and the `ggplot2` package
- Provide resources for further reading
- Highlight some best practices


## The Setup

I'll be using `renv` - however, `renv` is not the
focus of today. Plotting in R using the `ggplot2` package is.
Be sure to check out the doco [here](https://rstudio.github.io/renv/).
We're going to start by attaching the libraries with `library()`.

```{r setup}
# suppressing the startup messages 
library(tidyverse) |> suppressPackageStartupMessages()

# ggplot2 is a core tidyverse package so it's 
# included in the namespace when folks `library(tidyverse)`
```


## The Data

Today we're going to use the Electric Vehicle data from our #tidytuesday
community [challenge](https://github.com/CTOpenData/r-user-group/tree/d748587f4802578325b6a9d55c59b71563ba260d/tidy-tuesday).

### Grabbing the Data

Unfortunately, `RSocrata` was pulled from the CRAN - so we're going to have to
homebrew our own solution.

Fortunately, I put together a gist on github. You may recall Charles Powell
introduced these last year. You can take a look at the gist
[here](https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018).

We can use `devtools` to source the gist and grab the function I wrote
to download *all* the EV data.

```{r}
#| label: gist

devtools::source_gist(
  id = "https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018",
  sha1 = "5b27e785462239543a6cda235382ebec7c381471"
)

# function exist?
head(pull_odp)
```

We have our function, now lets grab that open data.

```{r}
#| label: data-grab

ev <- pull_odp(resource = "y7ky-5wcz") # this is the ODP "four by four"
```

### Data Recon

Lets take a look at this dataset so we can have a better idea
of what we are working with.

```{r}
head(ev)
```

```{r}
glimpse(ev)
```

So we have 10 columns and just under 54,000 rows.
Let's take a high level look at the _content_ of the data
with `summary()`.

```{r}
summary(ev)
```


### Quick Wrangle!

Just going to quickly wrangle some data - we're going to skip over this,
but feel free to take a look at the source code when you have time. Pretend
the data came like this :D

```{r}
#| label: wrangle
#| code-fold: true
#| code-summary: "Show the code"
 
data <- 
  ev |> 
  mutate(
          across(
              .cols = c(
                  id,
                  vehicleweight,
                  vehicleyear,
                  vehicledeclaredgrossweight,
                  vehiclerecordedgvwr,
              ),
              .fns = as.numeric
          ),
          across(
              .cols = c(
                  registration_date_start,
                  registration_date_expiration
              ),
              .fns = as_date
          )
      )

char_data <-
    data |>
    select(where(is.character))

char_data <-
    data |>
    select(where(is.character))

maybe_factors <-
    map(
        char_data,
        \(var) {
            count(char_data, {{ var }}, sort = TRUE)
        }
    ) |>
    keep(\(df) nrow(df) < 100) |>
    names()

ev <-
    data |>
    mutate(
        across(
            .cols = all_of(maybe_factors),
            .fns = \(col) {
                col |>
                    forcats::as_factor() |>
                    forcats::fct_infreq()
            }
        )
    )

```


## `ggplot2` and friends

`ggplot2` is now over 10 years old and a stable and trusted package
for visualizations.  It is based on the core philosphy around
Leland Wilkinson's _The Grammar of Graphics_.  

> _Wilkinson, L. (2005), The Grammar of Graphics, 2nd ed., Springer._

If you like, you can read up on how `ggplot2` incorporates
those ideals [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/).

It's probably safe to say it is a cornerstone of the R community.  
The examples, and [documentation](https://ggplot2.tidyverse.org/) 
you can find online is often extensive and well written. 
`python` even has a port of it with the `plotnine` package.

### Syntax Changes: a note about `+`

Right away folks are going to notice that `ggplot2` uses
a different syntax than the usual base pipe `|>` or 
maggritr pipe `%>%` that you will often see out in
the wild.  This is primarily down to how old the 
package is, however, I find that `+` more accurately
describes the thought process involved with crafting
a plot.

With pipes, action happen linearly in order, whereas
you an think of `ggplot2` plots like building up a 
layer cake. You are _adding_ layers, quite literally
with a `+`. 


## ggplot 2 in action

`ggplot2` is fairly flexible in how you structure your
commands, so you're likley to see some variations between
developers.


```{r}

# we can start with the data, or a call to `ggplot()`
# I prefer starting with the data most often, otherwise
# folks can use ggplot(data = ev, ...)

# let's start with a look at carat vs price
ev |> 
    ggplot(
        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to
            x = registration_date_start, # x axis
            y = vehicletype # y axis
        )
    )

```

If we just run the above, we'll get a blank plot. However, take a quick look at 
that - so much of the stage has already been laid out for us.  `ggplot2` has fairly
sensible defaults, so for the folks who want to get in and get out quickly, they
can do that.  This allows plotting and visualizations to be used as one part
of an exploratory analysis, and not just as a final, finished product, because
it is so quick and easy to do once users are acquainted with `ggplot2`.

### Adding points

How about we fill in some useful details, no?

```{r}
ev |> 
    ggplot(
        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to
            x = registration_date_start # x axis
        )
# Let's add some layers!
    ) +
# How about some bars?
    geom_bar()
```

Goodness there is alot going on there! 
How do we make sense of that mess?

Notice again that we had some fairly sensible defaults, without having to
dig into all the arguments of the functions.


Let's pretend our supervisor want's to compare the `vehicletype` over `time`.

Let's do a quick wrangle so we can take a look.


```{r}
#| label: natural-log

# using lubridate and forcats
agg_by_year_quarter_type <-
    ev |>
    mutate(
        year = year(registration_date_start),
        quarter = quarter(registration_date_start),
        vehicletype = forcats::fct_lump_prop(
            vehicletype,
            prop = .01
        )
    ) |>
    group_by(year, quarter, vehicletype) |>
    count(name = "type_count") |>
    ungroup() |>
    mutate(log_type = log(type_count))

head(agg_by_year_quarter_type)
```

Now, I want to save some typing. `ggplot2` objects can be saved and combined
in fun and exciting ways.

```{r}
base <- 
    agg_by_year_quarter_type |> 
    ggplot(
        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to
            x = quarter, # x axis
            y = log_type, # y axis
            fill = vehicletype # we're breaking types out by color now
        )
    )

# the same thing again
base + geom_col()
```

Cool... but we can make this better.
Didn't this data set span multiple years?

### Adding Color based on Features in the Data

```{r}
base +
  geom_col(color = "black")

# color is the argument used for points
# but most geometries that get "filled" with color
# based on the data use the fill argument.
# And color is typically an outline or something 
# not inside an aesthetic and/or not tied to data.

```


### Telling a story

Let's use a boxplot.

```{r}

base +
  geom_boxplot(aes(log_type, quarter))
```


How about some trend lines by cut?

```{r}
#| eval: false
ev |>
  ggplot() +
  geom_smooth(aes(carat, price, color = cut))
```

hmmm I want less information...


```{r}
#| eval: false
ev |>
  ggplot() +
  geom_smooth(
    aes(carat, price, color = cut), # these are the aesthetics based on data
    # below here are arguments we can tweak baseed on the geometry chosen
    method = "lm", # for a linear regression line
    se = FALSE # I don't want to see the confidence interval
  )
```
that's a bit better. Let's tidy these up a bit.

```{r}
#| eval: false
smooth <- 
  ev |>
  ggplot() +
  geom_smooth(
    aes(
      x = carat,
 # lets use the natural log of price to highlight differences a bit more      
      y = log(price),
      color = cut
    ),
    method = "lm",
    se = FALSE
  )

smooth
```
### Tweaking the look and feel

```{r}
#| eval: false
# there are many to choose from - and you can even build your own!

smooth + theme_classic()

smooth + theme_bw()

smooth + theme_minimal()

```
```{r}
#| eval: false
# now for the labels

with_labels <- 
  smooth +
  theme_classic() +
  # add some labels
  labs(
    title = "Carat v Price by Cut",
    subtitle = paste("Data as of", lubridate::today()),
    caption = "CT DPH Diamond Commitee",
    tag = "Figure 1.",
    # the next bit refers to the mapped variables x, y etc... BUT it may
    # not always be x and y
    x = "Carat",
    y = "Natural Log of Price",
    col = "Diamond Cut" # can use an empty string "" for no label
  )

with_labels

```


### Misc tweaks

```{r}
#| eval: false
with_labels +
  theme(
    legend.direction = "horizontal",
    legend.position = "bottom"
  )
```


