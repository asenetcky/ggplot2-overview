{
  "hash": "4ab2fab364f179bf94681a3bc5327214",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting Electric Vehicle Open Data\"\nsubtitle: \"with ggplot2 and friends\"\ndate: \"2025-06-10\"\n---\n\n## Goal\n\nToday we're going to:\n\n- Introduce plotting with R and the `ggplot2` package\n- Provide resources for further reading\n- Highlight some best practices\n\n\n## The Setup\n\nI'll be using `renv` - however, `renv` is not the\nfocus of today. Plotting in R using the `ggplot2` package is.\nBe sure to check out the doco [here](https://rstudio.github.io/renv/).\nWe're going to start by attaching the libraries with `library()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# suppressing the startup messages\nlibrary(tidyverse) |> suppressPackageStartupMessages()\n\n# ggplot2 is a core tidyverse package so it's\n# included in the namespace when folks `library(tidyverse)`\n```\n:::\n\n\n\n## The Data\n\nToday we're going to use the Electric Vehicle data from our #tidytuesday\ncommunity [challenge](https://github.com/CTOpenData/r-user-group/tree/d748587f4802578325b6a9d55c59b71563ba260d/tidy-tuesday).\n\n### Grabbing the Data\n\nUnfortunately, `RSocrata` was pulled from the CRAN - so we're going to have to\nhomebrew our own solution.\n\nFortunately, I put together a gist on github. You may recall Charles Powell\nintroduced these last year. You can take a look at the gist\n[here](https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018).\n\nWe can use `devtools` to source the gist and grab the function I wrote\nto download *all* the EV data.\n\n::: {.callout-tip}\n  `devtools` is a collection of packages, like the `tidyverse`\n  that aims to smmoth over alot of *rough edges* in development.\n  Primarily around building R packages or interacting with **GitHub**,\n  but there is all sorts of neat things in `devtools` - so be sure\n  to check it out.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_gist(\n  id = \"https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018\",\n  sha1 = \"5b27e785462239543a6cda235382ebec7c381471\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Sourcing gist \"52bf3fa10a2dff08f62da96e2347e018\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# function exist?\nhead(pull_odp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                                           \n1 function (domain = \"https://data.ct.gov/\", resource)                                     \n2 {                                                                                        \n3     checkmate::assert(checkmate::check_string(domain), checkmate::check_string(resource, \n4         n.chars = 9L), combine = \"and\")                                                  \n5     resource_string <- glue::glue(\"resource/{resource}.json\")                            \n6     limit <- 10000                                                                       \n```\n\n\n:::\n:::\n\n\nWe have our function, now lets grab that open data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev <- pull_odp(resource = \"y7ky-5wcz\") # this is the ODP \"four by four\"\n```\n:::\n\n\n### Data Recon\n\nLets take a look at this dataset so we can have a better idea\nof what we are working with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 20\n  id      platetype primarycustomercity primarycustomerstate\n  <chr>   <chr>     <chr>               <chr>               \n1 2951643 Passenger ARMONK              NY                  \n2 2945023 Passenger AVON                CT                  \n3 2948019 Passenger AVON                CT                  \n4 2318395 Passenger AVON                CT                  \n5 2952422 Passenger BETHANY             CT                  \n6 2952920 Passenger BOLTON              CT                  \n# ℹ 16 more variables: registration_date_start <chr>,\n#   registration_date_expiration <chr>, registrationusage <chr>,\n#   vehicletype <chr>, vehicleweight <chr>, vehicleyear <chr>,\n#   vehiclemake <chr>, vehiclemodel <chr>, vehiclebody <chr>,\n#   primarycolor <chr>, vehicledeclaredgrossweight <chr>, fuelcode <chr>,\n#   vehiclerecordedgvwr <chr>, vehicle_name <chr>, type <chr>,\n#   vehicle_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,489\nColumns: 20\n$ id                           <chr> \"2951643\", \"2945023\", \"2948019\", \"2318395…\n$ platetype                    <chr> \"Passenger\", \"Passenger\", \"Passenger\", \"P…\n$ primarycustomercity          <chr> \"ARMONK\", \"AVON\", \"AVON\", \"AVON\", \"BETHAN…\n$ primarycustomerstate         <chr> \"NY\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\",…\n$ registration_date_start      <chr> \"2024-12-31T00:00:00.000\", \"2024-12-31T00…\n$ registration_date_expiration <chr> \"2027-12-30T00:00:00.000\", \"2027-12-30T00…\n$ registrationusage            <chr> \"Regular\", \"Regular\", \"Regular\", \"Regular…\n$ vehicletype                  <chr> \"SUV\", \"SUV\", \"SUV\", \"Passenger\", \"Passen…\n$ vehicleweight                <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicleyear                  <chr> \"2025\", \"2024\", \"2025\", \"2022\", \"2019\", \"…\n$ vehiclemake                  <chr> \"Audi\", \"Cadillac\", \"Tesla\", \"Volvo\", \"Te…\n$ vehiclemodel                 <chr> \"Q5 E Premium 55\", \"Lyriq Lux\", \"Model Y\"…\n$ vehiclebody                  <chr> \"SU\", \"SU\", \"SU\", \"SU\", \"4D\", \"4D\", \"SU\",…\n$ primarycolor                 <chr> \"Gray\", \"Gray\", \"White\", \"Black\", \"Blue\",…\n$ vehicledeclaredgrossweight   <chr> \"0\", \"0\", \"0\", \"808040\", \"0\", \"0\", \"0\", \"…\n$ fuelcode                     <chr> \"H04\", \"E00\", \"E00\", \"H04\", \"E00\", \"E00\",…\n$ vehiclerecordedgvwr          <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicle_name                 <chr> \"Audi Q5 Plug In\", \"Cadillac Lyriq\", \"Tes…\n$ type                         <chr> \"PHEV\", \"BEV\", \"BEV\", \"PHEV\", \"BEV\", \"BEV…\n$ vehicle_category             <chr> \"Light-Duty (Class 1-2)\", \"Light-Duty (Cl…\n```\n\n\n:::\n:::\n\n\nSo we have `20` columns and `60,489` rows. \n\n### Quick Wrangle!\n\n> I don't want to spoil anyone's sense of discovery with these data.\n> So I am going to just quickly wrangle it and skip over it,\n> but feel free to take a look at the source code when you have time.\n> Or after you're done experimenting with it.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndata <-\n  ev |>\n  mutate(\n    across(\n      .cols = c(\n        id,\n        vehicleweight,\n        vehicleyear,\n        vehicledeclaredgrossweight,\n        vehiclerecordedgvwr,\n      ),\n      .fns = as.numeric\n    ),\n    across(\n      .cols = c(\n        registration_date_start,\n        registration_date_expiration\n      ),\n      .fns = as_date\n    )\n  )\n\nchar_data <-\n  data |>\n  select(where(is.character))\n\nchar_data <-\n  data |>\n  select(where(is.character))\n\nmaybe_factors <-\n  map(\n    char_data,\n    \\(var) {\n      count(char_data, {{ var }}, sort = TRUE)\n    }\n  ) |>\n  keep(\\(df) nrow(df) < 100) |>\n  names()\n\nev <-\n  data |>\n  mutate(\n    across(\n      .cols = all_of(maybe_factors),\n      .fns = \\(col) {\n        col |>\n          forcats::as_factor() |>\n          forcats::fct_infreq()\n      }\n    )\n  )\n```\n:::\n\n\n\n## ggplot2 and friends\n\n`ggplot2` is now over 10 years old and a stable and trusted package\nfor visualizations.  It is based on the core philosphy around\nLeland Wilkinson's _The Grammar of Graphics_.  \n\n> _Wilkinson, L. (2005), The Grammar of Graphics, 2nd ed., Springer._\n\nIf you like, you can read up on how `ggplot2` incorporates\nthose ideals [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/).\n\nIt's probably safe to say it is a cornerstone of the R community.  \nThe examples, and [documentation](https://ggplot2.tidyverse.org/) \nyou can find online is often extensive and well written. \n`python` even has a port of it with the `plotnine` package.\n\n### Syntax: a note about `+`\n\nRight away folks are going to notice that `ggplot2` uses\na different syntax than the usual base pipe `|>` or \nmaggritr pipe `%>%` that you will often see out in\nthe wild.  This is primarily down to how old the \npackage is, however, I find that `+` more accurately\ndescribes the thought process involved with crafting\na plot.\n\n::: {.callout-tip}\nWith pipes, actions happen linearly in order, whereas\nwith `+` you can think of `ggplot2` plots like building \nup a layer cake. You are _adding_ layers, quite literally\nwith a `+`. The order of the layers doesn't matter *quite*\nas much as the whole.\n:::\n\n## ggplot 2 in action\n\n`ggplot2` is fairly flexible in how you structure your\ncommands, so you're likley to see some variations between\ndevelopers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can start with the data, or a call to `ggplot()`\n# I prefer starting with the data and piping it in, otherwise\n# folks can use ggplot(data = ev, ...)\n\nev |>\n  ggplot(\n    mapping = aes(\n      # we're mapping our aesthetic, think of it like a base we pin layers to\n      x = registration_date_start, # x axis\n      y = vehicletype # y axis\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/setting-the-stage-1.png){width=672}\n:::\n:::\n\n\nIf we just run the above, we'll get a blank plot. However, take a quick look at \nthat - so much of the stage has already been laid out for us.  `ggplot2` has fairly\nsensible defaults, so for the folks who want to get in and get out quickly, they\ncan do that.  This allows plotting and visualizations to be used as one part\nof an exploratory analysis, and not just as a final, finished product, because\nit is so quick and easy to do once users are acquainted with `ggplot2`.\n\n### Adding Details\n\nHow about we fill in some useful details, no?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's add some layers!\nev |>\n  ggplot(\n    mapping = aes(\n      # we're mapping our aesthetic, think of it like a base we pin layers to\n      x = registration_date_start # x axis\n    )\n  ) +\n  geom_bar() # How about some bars?\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/details-1.png){width=672}\n:::\n:::\n\n\nYou can combine `geom_` layers!\n\nWe can have one geom:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncount_by_day <-\n  ev |>\n  count(registration_date_start, name = \"count\")\n\ncount_by_day |>\n  ggplot(\n    mapping = aes(\n      x = registration_date_start,\n      y = count\n    )\n  ) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/combining-geoms-1.png){width=672}\n:::\n:::\n\n\nOr two - sharing the same aesthetic and variables\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_by_day |>\n  ggplot(\n    mapping = aes(\n      x = registration_date_start,\n      y = count\n    )\n  ) +\n  geom_point() +\n  geom_smooth(\n    method = \"lm\",\n    se = FALSE,\n    color = \"red\",\n    linewidth = 1.5\n  ) |>\n    suppressMessages()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/or-two-1.png){width=672}\n:::\n:::\n\n\nGoodness there is alot going on there! \n\nDoes day of week make a difference? Let's find out.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev |>\n  select(registration_date_start) |>\n  mutate(\n    dow = wday(\n      registration_date_start,\n      label = TRUE\n    )\n  ) |>\n  count(registration_date_start, dow) |>\n  ggplot() +\n  geom_boxplot(aes(dow, n))\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/day-of-week-1.png){width=672}\n:::\n:::\n\n\n\nNotice again that we had some fairly sensible defaults, without having to\ndig into all the arguments of the functions.\n\n\n### The Ask\nPretend for a moment that our supervisor wants to compare the \n`vehicletype` over `time`.\nWe'll do another quick wrangle so we can more easily compare types\nover time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagg_by_year_quarter_type <-\n  ev |>\n  mutate(\n    year = year(registration_date_start),\n    quarter = quarter(registration_date_start),\n    vehicletype = forcats::fct_lump_prop(\n      vehicletype,\n      prop = .01\n    )\n  ) |>\n  count(year, quarter, vehicletype, name = \"type_count\")\n\nagg_by_year_quarter_type |>\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/aggregating-1.png){width=672}\n:::\n:::\n\n\nwhat about year and quarter?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagg_by_year_quarter_type |>\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count\n    )\n  ) +\n  facet_grid(cols = vars(year))\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/year-quarter-1.png){width=672}\n:::\n:::\n\n\n\n### Adding Color based on Features in the Data\nDidn't we want to compare `vehicletype`?\nlet's do that....but how?\n\nUsing color!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagg_by_year_quarter_type |>\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count,\n      # now colors are added to break out based on values in the data\n      fill = vehicletype\n    ),\n    position = position_dodge()\n  ) +\n  facet_grid(cols = vars(year))\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/caryons-1.png){width=672}\n:::\n:::\n\n\nLet's natural log transform these data to get rid of that skew.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using lubridate and forcats\nagg_by_year_quarter_type <-\n  agg_by_year_quarter_type |>\n  mutate(log_type = log(type_count))\n\nhead(agg_by_year_quarter_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n   year quarter vehicletype type_count log_type\n  <dbl>   <int> <fct>            <int>    <dbl>\n1  2022       1 Passenger          949    6.86 \n2  2022       1 SUV                627    6.44 \n3  2022       1 Truck               10    2.30 \n4  2022       1 Van                  5    1.61 \n5  2022       1 Other                2    0.693\n6  2022       2 Passenger         1428    7.26 \n```\n\n\n:::\n:::\n\n\nAnd try again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nagg_by_year_quarter_type |>\n  ggplot() +\n  geom_col(\n    aes(quarter, log_type, fill = vehicletype),\n    position = position_dodge()\n  ) +\n  facet_grid(cols = vars(year))\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/take-two-1.png){width=672}\n:::\n:::\n\n\n\nNow, I want to save some typing. `ggplot2` objects can be saved and combined\nin fun and exciting ways.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <-\n  agg_by_year_quarter_type |>\n  ggplot(\n    aes(quarter, log_type, fill = vehicletype)\n  ) +\n  facet_grid(cols = vars(year))\n\nbase\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/saving-ggplot-objects-1.png){width=672}\n:::\n:::\n\n\nNothing in that plot until we add a `geom_`. So just like our\nplot with the points and the trendline  where we combined\n`geom_`'s in one end to end statement - you can combine *saved* \n`ggplot2` objects with `geom_`'s as well.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol_base <- base + geom_col(position = position_dodge())\ncol_base\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/combine-objects-1.png){width=672}\n:::\n:::\n\n\nCool... now we can focus on making this look nicer.\n\n### Tweaking the look and feel\n\n`ggplot2` has a number of built in themes, and you can even make your\nown. State of Connecticut has some newish style specifications, sounds\nlike a great theme to make and have on hand. Why not ship it in an R package?\n\n::: {.callout-tip}\nOPM took that style spec and ran with it in their publication:\n[CT Data Visualization Guidelines](https://ctopendata.github.io/data-visualization-guidelines/)\n:::\n\nHere are some common built-in themes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# there are many to choose from - and you can even build your own!\n\ncol_base + theme_classic()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/ggplot-themes-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncol_base + theme_bw()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/ggplot-themes-2.png){width=672}\n:::\n\n```{.r .cell-code}\ncol_base + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/ggplot-themes-3.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# now for the labels\nwith_labels <-\n  col_base +\n  theme_classic() +\n  # add some labels\n  labs(\n    title = \"This is a Title\",\n    subtitle = paste(\"Subtitle as of\", lubridate::today()),\n    caption = \"this is a caption - Open Data is Awesome!\",\n    tag = \"This is a tag\",\n    # the next bit refers to the mapped variables x, y etc... BUT it may\n    # not always be x and y\n    x = \"This is an x axis\",\n    y = \"This is a y axis\",\n    fill = \"my fill values\"\n  )\n\nwith_labels\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/label-plot-1.png){width=672}\n:::\n:::\n\n\n\n### Opinionated Polish\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase +\n  geom_col(\n    position = position_dodge(), # I want bars side by side, not stacked\n    col = \"black\" # just a black outline\n  ) +\n  scale_fill_viridis_d() + # use viridis color scale\n  theme_classic() + # we can use a default theme\n  theme(\n    # and add our own components!\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\"\n  ) +\n  labs(\n    x = \"\", # I don't want axis labels\n    y = \"\",\n    fill = \"\",\n    title = \"Natural Log of Vehicle Type Count by Quarter by Year\"\n  )\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/its-like-my-opinion-man-1.png){width=672}\n:::\n:::\n\n\n\n",
    "supporting": [
      "plotting-evs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}