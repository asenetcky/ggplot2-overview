{
  "hash": "07368011f4079775ed232c5f29853107",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Plotting Electric Vehicle Open Data\"\nsubtitle: \"with ggplot2 and friends\"\ndate: \"2025-06-10\"\n---\n\n## Goal\n\nToday we're going to:\n\n- Introduce plotting with R and the `ggplot2` package\n- Provide resources for further reading\n- Highlight some best practices\n\n\n## The Setup\n\nI'll be using `renv` - however, `renv` is not the\nfocus of today. Plotting in R using the `ggplot2` package is.\nBe sure to check out the doco [here](https://rstudio.github.io/renv/).\nWe're going to start by attaching the libraries with `library()`. See commented\nout code for a standard installion of the tidyverse.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# suppressing the startup messages \nlibrary(tidyverse) |> suppressPackageStartupMessages()\n\n# ggplot2 is a core tidyverse package so it's \n# included in the namespace when folks `library(tidyverse)`\n```\n:::\n\n\n\n## The Data\n\nToday we're going to use the Electric Vehicle data from our #tidytuesday\ncommunity [challenge](https://github.com/CTOpenData/r-user-group/tree/d748587f4802578325b6a9d55c59b71563ba260d/tidy-tuesday).\n\n### Grabbing the Data\n\nUnfortunately, `RSocrata` was pulled from the CRAN - so we're going to have to\nhomebrew our own solution.\n\nFortunately, I put together a gist on github. You may recall Charles Powell\nintroduced these last year. You can take a look at the gist\n[here](https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018).\n\nWe can use `devtools` to source the gist and grab the function I wrote\nto download *all* the EV data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndevtools::source_gist(\n  id = \"https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018\",\n  sha1 = \"5b27e785462239543a6cda235382ebec7c381471\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ Sourcing gist \"52bf3fa10a2dff08f62da96e2347e018\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# function exist?\nhead(pull_odp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                                                                           \n1 function (domain = \"https://data.ct.gov/\", resource)                                     \n2 {                                                                                        \n3     checkmate::assert(checkmate::check_string(domain), checkmate::check_string(resource, \n4         n.chars = 9L), combine = \"and\")                                                  \n5     resource_string <- glue::glue(\"resource/{resource}.json\")                            \n6     limit <- 10000                                                                       \n```\n\n\n:::\n:::\n\n\nWe have our function, now lets grab that open data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev <- pull_odp(resource = \"y7ky-5wcz\") # this is the ODP \"four by four\"\n```\n:::\n\n\n### Data Recon\n\nLets take a look at this dataset so we can have a better idea\nof what we are working with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 20\n  id      platetype primarycustomercity primarycustomerstate\n  <chr>   <chr>     <chr>               <chr>               \n1 2951643 Passenger ARMONK              NY                  \n2 2945023 Passenger AVON                CT                  \n3 2948019 Passenger AVON                CT                  \n4 2318395 Passenger AVON                CT                  \n5 2952422 Passenger BETHANY             CT                  \n6 2952920 Passenger BOLTON              CT                  \n# ℹ 16 more variables: registration_date_start <chr>,\n#   registration_date_expiration <chr>, registrationusage <chr>,\n#   vehicletype <chr>, vehicleweight <chr>, vehicleyear <chr>,\n#   vehiclemake <chr>, vehiclemodel <chr>, vehiclebody <chr>,\n#   primarycolor <chr>, vehicledeclaredgrossweight <chr>, fuelcode <chr>,\n#   vehiclerecordedgvwr <chr>, vehicle_name <chr>, type <chr>,\n#   vehicle_category <chr>\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,489\nColumns: 20\n$ id                           <chr> \"2951643\", \"2945023\", \"2948019\", \"2318395…\n$ platetype                    <chr> \"Passenger\", \"Passenger\", \"Passenger\", \"P…\n$ primarycustomercity          <chr> \"ARMONK\", \"AVON\", \"AVON\", \"AVON\", \"BETHAN…\n$ primarycustomerstate         <chr> \"NY\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\",…\n$ registration_date_start      <chr> \"2024-12-31T00:00:00.000\", \"2024-12-31T00…\n$ registration_date_expiration <chr> \"2027-12-30T00:00:00.000\", \"2027-12-30T00…\n$ registrationusage            <chr> \"Regular\", \"Regular\", \"Regular\", \"Regular…\n$ vehicletype                  <chr> \"SUV\", \"SUV\", \"SUV\", \"Passenger\", \"Passen…\n$ vehicleweight                <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicleyear                  <chr> \"2025\", \"2024\", \"2025\", \"2022\", \"2019\", \"…\n$ vehiclemake                  <chr> \"Audi\", \"Cadillac\", \"Tesla\", \"Volvo\", \"Te…\n$ vehiclemodel                 <chr> \"Q5 E Premium 55\", \"Lyriq Lux\", \"Model Y\"…\n$ vehiclebody                  <chr> \"SU\", \"SU\", \"SU\", \"SU\", \"4D\", \"4D\", \"SU\",…\n$ primarycolor                 <chr> \"Gray\", \"Gray\", \"White\", \"Black\", \"Blue\",…\n$ vehicledeclaredgrossweight   <chr> \"0\", \"0\", \"0\", \"808040\", \"0\", \"0\", \"0\", \"…\n$ fuelcode                     <chr> \"H04\", \"E00\", \"E00\", \"H04\", \"E00\", \"E00\",…\n$ vehiclerecordedgvwr          <chr> \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicle_name                 <chr> \"Audi Q5 Plug In\", \"Cadillac Lyriq\", \"Tes…\n$ type                         <chr> \"PHEV\", \"BEV\", \"BEV\", \"PHEV\", \"BEV\", \"BEV…\n$ vehicle_category             <chr> \"Light-Duty (Class 1-2)\", \"Light-Duty (Cl…\n```\n\n\n:::\n:::\n\n\nSo we have 10 columns and just under 54,000 rows.\nLet's take a high level look at the _content_ of the data\nwith `summary()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(ev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      id             platetype         primarycustomercity primarycustomerstate\n Length:60489       Length:60489       Length:60489        Length:60489        \n Class :character   Class :character   Class :character    Class :character    \n Mode  :character   Mode  :character   Mode  :character    Mode  :character    \n registration_date_start registration_date_expiration registrationusage \n Length:60489            Length:60489                 Length:60489      \n Class :character        Class :character             Class :character  \n Mode  :character        Mode  :character             Mode  :character  \n vehicletype        vehicleweight      vehicleyear        vehiclemake       \n Length:60489       Length:60489       Length:60489       Length:60489      \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n vehiclemodel       vehiclebody        primarycolor      \n Length:60489       Length:60489       Length:60489      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n vehicledeclaredgrossweight   fuelcode         vehiclerecordedgvwr\n Length:60489               Length:60489       Length:60489       \n Class :character           Class :character   Class :character   \n Mode  :character           Mode  :character   Mode  :character   \n vehicle_name           type           vehicle_category  \n Length:60489       Length:60489       Length:60489      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n```\n\n\n:::\n:::\n\n\n\n### Quick Wrangle!\n\nJust going to quickly wrangle some data - we're going to skip over this,\nbut feel free to take a look at the source code when you have time. Pretend\nthe data came like this :D\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndata <- \n  ev |> \n  mutate(\n          across(\n              .cols = c(\n                  id,\n                  vehicleweight,\n                  vehicleyear,\n                  vehicledeclaredgrossweight,\n                  vehiclerecordedgvwr,\n              ),\n              .fns = as.numeric\n          ),\n          across(\n              .cols = c(\n                  registration_date_start,\n                  registration_date_expiration\n              ),\n              .fns = as_date\n          )\n      )\n\nchar_data <-\n    data |>\n    select(where(is.character))\n\nchar_data <-\n    data |>\n    select(where(is.character))\n\nmaybe_factors <-\n    map(\n        char_data,\n        \\(var) {\n            count(char_data, {{ var }}, sort = TRUE)\n        }\n    ) |>\n    keep(\\(df) nrow(df) < 100) |>\n    names()\n\nev <-\n    data |>\n    mutate(\n        across(\n            .cols = all_of(maybe_factors),\n            .fns = \\(col) {\n                col |>\n                    forcats::as_factor() |>\n                    forcats::fct_infreq()\n            }\n        )\n    )\n```\n:::\n\n\n\n## `ggplot2` and friends\n\n`ggplot2` is now over 10 years old and a stable and trusted package\nfor visualizations.  It is based on the core philosphy around\nLeland Wilkinson's _The Grammar of Graphics_.  \n\n> _Wilkinson, L. (2005), The Grammar of Graphics, 2nd ed., Springer._\n\nIf you like, you can read up on how `ggplot2` incorporates\nthose ideals [ggplot2: Elegant Graphics for Data Analysis (3e)](https://ggplot2-book.org/).\n\nIt's probably safe to say it is a cornerstone of the R community.  \nThe examples, and [documentation](https://ggplot2.tidyverse.org/) \nyou can find online is often extensive and well written. \n`python` even has a port of it with the `plotnine` package.\n\n### Syntax Changes: a note about `+`\n\nRight away folks are going to notice that `ggplot2` uses\na different syntax than the usual base pipe `|>` or \nmaggritr pipe `%>%` that you will often see out in\nthe wild.  This is primarily down to how old the \npackage is, however, I find that `+` more accurately\ndescribes the thought process involved with crafting\na plot.\n\nWith pipes, action happen linearly in order, whereas\nyou an think of `ggplot2` plots like building up a \nlayer cake. You are _adding_ layers, quite literally\nwith a `+`. \n\n\n## ggplot 2 in action\n\n`ggplot2` is fairly flexible in how you structure your\ncommands, so you're likley to see some variations between\ndevelopers.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can start with the data, or a call to `ggplot()`\n# I prefer starting with the data most often, otherwise\n# folks can use ggplot(data = ev, ...)\n\n# let's start with a look at carat vs price\nev |> \n    ggplot(\n        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to\n            x = registration_date_start, # x axis\n            y = vehicletype # y axis\n        )\n    )\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nIf we just run the above, we'll get a blank plot. However, take a quick look at \nthat - so much of the stage has already been laid out for us.  `ggplot2` has fairly\nsensible defaults, so for the folks who want to get in and get out quickly, they\ncan do that.  This allows plotting and visualizations to be used as one part\nof an exploratory analysis, and not just as a final, finished product, because\nit is so quick and easy to do once users are acquainted with `ggplot2`.\n\n### Adding points\n\nHow about we fill in some useful details, no?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev |> \n    ggplot(\n        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to\n            x = registration_date_start # x axis\n        )\n# Let's add some layers!\n    ) +\n# How about some bars?\n    geom_bar()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nGoodness there is alot going on there! \nHow do we make sense of that mess?\n\nNotice again that we had some fairly sensible defaults, without having to\ndig into all the arguments of the functions.\n\n\nLet's pretend our supervisor want's to compare the `vehicletype` over `time`.\n\nLet's do a quick wrangle so we can take a look.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using lubridate and forcats\nagg_by_year_quarter_type <-\n    ev |>\n    mutate(\n        year = year(registration_date_start),\n        quarter = quarter(registration_date_start),\n        vehicletype = forcats::fct_lump_prop(\n            vehicletype,\n            prop = .01\n        )\n    ) |>\n    group_by(year, quarter, vehicletype) |>\n    count(name = \"type_count\") |>\n    ungroup() |>\n    mutate(log_type = log(type_count))\n\nhead(agg_by_year_quarter_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n   year quarter vehicletype type_count log_type\n  <dbl>   <int> <fct>            <int>    <dbl>\n1  2022       1 Passenger          949    6.86 \n2  2022       1 SUV                627    6.44 \n3  2022       1 Truck               10    2.30 \n4  2022       1 Van                  5    1.61 \n5  2022       1 Other                2    0.693\n6  2022       2 Passenger         1428    7.26 \n```\n\n\n:::\n:::\n\n\nNow, I want to save some typing. `ggplot2` objects can be saved and combined\nin fun and exciting ways.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- \n    agg_by_year_quarter_type |> \n    ggplot(\n        mapping = aes( # we're mapping our aesthetic, think of it like a base we pin layers to\n            x = quarter, # x axis\n            y = log_type, # y axis\n            fill = vehicletype # we're breaking types out by color now\n        )\n    )\n\n# the same thing again\nbase + geom_col()\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nCool... but we can make this better.\nDidn't this data set span multiple years?\n\n### Adding Color based on Features in the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase +\n  geom_col(color = \"black\")\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# color is the argument used for points\n# but most geometries that get \"filled\" with color\n# based on the data use the fill argument.\n# And color is typically an outline or something \n# not inside an aesthetic and/or not tied to data.\n```\n:::\n\n\n\n### Telling a story\n\nLet's use a boxplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbase +\n  geom_boxplot(aes(log_type, quarter))\n```\n\n::: {.cell-output-display}\n![](plotting-evs_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nHow about some trend lines by cut?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev |>\n  ggplot() +\n  geom_smooth(aes(carat, price, color = cut))\n```\n:::\n\n\nhmmm I want less information...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nev |>\n  ggplot() +\n  geom_smooth(\n    aes(carat, price, color = cut), # these are the aesthetics based on data\n    # below here are arguments we can tweak baseed on the geometry chosen\n    method = \"lm\", # for a linear regression line\n    se = FALSE # I don't want to see the confidence interval\n  )\n```\n:::\n\nthat's a bit better. Let's tidy these up a bit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmooth <- \n  ev |>\n  ggplot() +\n  geom_smooth(\n    aes(\n      x = carat,\n # lets use the natural log of price to highlight differences a bit more      \n      y = log(price),\n      color = cut\n    ),\n    method = \"lm\",\n    se = FALSE\n  )\n\nsmooth\n```\n:::\n\n### Tweaking the look and feel\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# there are many to choose from - and you can even build your own!\n\nsmooth + theme_classic()\n\nsmooth + theme_bw()\n\nsmooth + theme_minimal()\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# now for the labels\n\nwith_labels <- \n  smooth +\n  theme_classic() +\n  # add some labels\n  labs(\n    title = \"Carat v Price by Cut\",\n    subtitle = paste(\"Data as of\", lubridate::today()),\n    caption = \"CT DPH Diamond Commitee\",\n    tag = \"Figure 1.\",\n    # the next bit refers to the mapped variables x, y etc... BUT it may\n    # not always be x and y\n    x = \"Carat\",\n    y = \"Natural Log of Price\",\n    col = \"Diamond Cut\" # can use an empty string \"\" for no label\n  )\n\nwith_labels\n```\n:::\n\n\n\n### Misc tweaks\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwith_labels +\n  theme(\n    legend.direction = \"horizontal\",\n    legend.position = \"bottom\"\n  )\n```\n:::\n\n\n\n",
    "supporting": [
      "plotting-evs_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}